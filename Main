import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class PageRank {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the name of the input file containing the webgraph: ");
        String inputFileName = scanner.next();

        System.out.print("Enter the teleport probability x: ");
        double x = scanner.nextDouble();

        System.out.print("Enter the number of iterations k: ");
        int k = scanner.nextInt();

        try {
            int [][] webGraph = readWebGraphFromFile(inputFileName);
            
            System.out.println("Right Graph Matrix: ");
            printWebGraph(webGraph);
            double[] pageRanks = computePageRank(webGraph, x, k);

            System.out.println("Page Rank of each node:");
            double sumPageRanks = 0;
            for (int i = 0; i < pageRanks.length; i++) {
                System.out.printf("Node %d: %.6f%n", i + 1, pageRanks[i]);
                sumPageRanks += pageRanks[i];
            }
            System.out.printf("Sum of Page Ranks: %.6f%n", sumPageRanks);
        } catch (IOException e) {
            System.err.println("Error reading input file: " + e.getMessage());
        }

        scanner.close();
    }

   

    private static void printWebGraph(int[][] webGraph) {
        for (int i = 0; i < webGraph.length; i++) {
            for (int j = 0; j < webGraph[i].length; j++) {
                System.out.print(webGraph[i][j] + " ");
            }
            System.out.println();
        }
    }
    private static int[][] readWebGraphFromFile(String inputFileName) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(inputFileName))) {
            String line = reader.readLine();
            int nodeCount = (int) line.chars().filter(Character::isDigit).count();
            int[][] webGraph = new int[nodeCount][nodeCount];
            int rowIndex = 0;
            while (line != null) {
                int columnIndex = 0;
                for (char ch : line.toCharArray()) {
                    if (Character.isDigit(ch)) {
                        webGraph[rowIndex][columnIndex] = Character.getNumericValue(ch);
                        columnIndex++;
                    }
                }
                rowIndex++;
                line = reader.readLine();
            }
    
            return webGraph;
        }
    }
    
    
    
    

    /** Calculates the Page Rank of each node in the web graph
     * @param webGraph
     * @param teleportProbability
     * @param iterations
     * @return
     */
    private static double[] computePageRank(int[][] webGraph, double x, int k) {
        int nodeCount = webGraph.length;
        double[] pageRanks = new double[nodeCount];
    
        for (int i = 0; i < nodeCount; i++) {
            pageRanks[i] = 1.0 / nodeCount;
        }
    
        for (int iter = 0; iter < k; iter++) {
            double[] newPageRanks = new double[nodeCount];
    
            for (int i = 0; i < nodeCount; i++) {
                double sum = 0;
    
                for (int j = 0; j < nodeCount; j++) {
                    if (webGraph[i][j] == 1) {
                        sum += pageRanks[j] / getOutDegree(webGraph, j);
                    }
                }
                newPageRanks[i] = x / nodeCount + (1 - x) * sum;
            }
    
            pageRanks = newPageRanks;
        }
    
        return pageRanks;
    }
    
    
   
    /** Calculate the number of outgoing links from nodes to other nodes
     * @param webGraph
     * @param node
     * @return 
     */
    private static int getOutDegree(int[][] webGraph, int node) {
        int outDegree = 0;
    
        for (int i = 0; i < webGraph.length; i++) {
            if (webGraph[i][node] == 1) {
                outDegree++;
            }
        }
    
        return outDegree;
    }
    
}
