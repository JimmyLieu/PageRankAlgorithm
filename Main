import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Assignment4jimmy {
    public static void main(String args[]) {
        // page array with outgoing links from each page
        /**
         * int[][] pages = {
         * /* 1:
         */ // { 2, 3, 4 },
        /* 2: */ // { 1, 3, 4, 5, 6 },
        /* 3: */ // { 4 },
        /* 4: */ // { 2, 6 },
        /* 5: */ // { 1, 3, 4, 6 },
        /* 6: */ // { 2 },
        // };

        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter file name: ");
        String fileName = scanner.nextLine();
        int[][] pages = readWebGraph(fileName);
        double x = -1;
        int k = -1;
        do {
            System.out.print("Enter value x (probability of teleport):");
            x = scanner.nextDouble();
            if (x < 0 || x > 1)
                System.out.println("x must be a value between 0 and 1");
        } while (x < 0 || x > 1);
        do {
            System.out.print("Enter value k (number of iterations):");
            k = scanner.nextInt();
            if (k < 0)
                System.out.println("k must be a positive integer");
        } while (k < 0);

        // calculate Page Rank with x probability of teleport after k iterations
        double[] P = pageRank(pages, x, k);
        // print probability
        double sum = 0.0;
        for (int i = 0; i < P.length; i++) {
            System.out.println("Page Rank of Node [" + (i + 1) + "] = " + P[i]);
            sum = sum + P[i];
            System.out.println("Sum: " + sum);
        }

    }

    public static int[][] readWebGraph(String fileName) {
        int[][] pages = null;
        try {
            File file = new File(fileName);
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                System.out.println(scanner.nextLine());
            }
            // read number of rows and columns
            int numRows = scanner.nextInt();
            int numCols = scanner.nextInt();

            // read binary values for each row
            pages = new int[numRows][numCols];
            for (int i = 0; i < numRows; i++) {
                String rowString = scanner.next();
                for (int j = 0; j < numCols; j++) {
                    pages[i][j] = rowString.charAt(j) - '0';
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return pages;
    }

    // calculate Page Rank
    public static double[] pageRank(int[][] pages, double x, int k) {
        int N = pages.length;
        // create link probability index
        double[][] M = lpi(pages);

        // initial Page Rank for each page = 1/N
        double[] P = new double[N];
        for (int i = 0; i < N; i++) {
            P[i] = (double) 1 / N;
        }

        // for each iteration:
        for (int t = 0; t < k; t++) {
            // store Page Rank from previous iteration
            double[] prevP = P.clone();
            // calculate new rank for each page
            for (int j = 0; j < N; j++) {
                // P(k)[j] = x/N + (1-x) âˆ‘(M[i,j] * P(k-1)[i])
                P[j] = x / N;
                for (int i = 0; i < N; i++) {
                    P[j] += (1 - x) * M[i][j] * prevP[i];
                }
            }
        }

        return P;
    }

    // create link probability index
    public static double[][] lpi(int pages[][]) {
        int N = pages.length;
        double[][] lpi = new double[N][N];
        for (int i = 0; i < N; i++) {
            if (pages[i].length != 0) {
                for (int j = 0; j < pages[i].length; j++) {
                    lpi[i][pages[i][j] - 1] = (double) 1 / pages[i].length;
                }
            }
        }
        return lpi;
    }
}
